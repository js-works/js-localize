{
  "version": 3,
  "sources": ["../src/main/js-localize.ts", "../src/main/internal/utils.ts", "../src/main/internal/dict.ts"],
  "sourcesContent": ["import {\r\n  formatDate,\r\n  formatNumber,\r\n  formatRelativeTime,\r\n  getCalendarWeek,\r\n  getFirstDayOfWeek,\r\n  getWeekendDays,\r\n  parseDate,\r\n  parseNumber\r\n} from './internal/utils'\r\n\r\nimport { Dictionary } from 'internal/dict'\r\n\r\n// === exports =======================================================\r\n\r\nexport {\r\n  // -- functions ---\r\n  addToDict,\r\n  init,\r\n  localize,\r\n  check,\r\n  // --- types ---\r\n  Localization as Behavior,\r\n  Category,\r\n  Localizer,\r\n  Terms,\r\n  TermsOf,\r\n  Translations,\r\n  NumberFormat,\r\n  DateFormat,\r\n  RelativeTimeFormat,\r\n  RelativeTimeUnit\r\n}\r\n\r\n// === public types ==================================================\r\n\r\ndeclare global {\r\n  namespace Localize {\r\n    interface TranslationsMap {}\r\n  }\r\n}\r\n\r\ntype Category = `${string}.${string}`\r\n\r\ntype Terms<\r\n  T extends Record<\r\n    string,\r\n    string | ((params: Record<string, any>) => string)\r\n  > = any\r\n> = T\r\n\r\ntype Translations = Record<Lang, Record<Category, Terms>>\r\n\r\ntype CategoriesOf<A> = A extends Record<Lang, Record<infer C, Terms>>\r\n  ? C extends Category\r\n    ? C\r\n    : never\r\n  : never\r\n\r\ntype TermsOf<A> = A extends Record<Lang, Record<infer C, infer T>>\r\n  ? C extends Category\r\n    ? T\r\n    : never\r\n  : A extends Category\r\n  ? A extends keyof TranslationsMap\r\n    ? TranslationsMap[A] extends Terms\r\n      ? TranslationsMap[A]\r\n      : never\r\n    : never\r\n  : never\r\n\r\ntype Localization = Readonly<{\r\n  translate<\r\n    C extends keyof TranslationsMap,\r\n    K extends keyof TranslationsMap[C]\r\n  >(\r\n    locale: string,\r\n    category: C & Category,\r\n    key: K & string,\r\n    params?: FirstArg<TranslationsMap[C][K]>\r\n  ): string | null\r\n\r\n  parseNumber(locale: string, numberString: string): number | null\r\n  parseDate(locale: string, dateString: string): Date | null\r\n\r\n  formatNumber(locale: string, value: number, format?: NumberFormat): string\r\n  formatDate(locale: string, value: Date, format?: DateFormat | null): string\r\n\r\n  formatRelativeTime(\r\n    locale: string,\r\n    value: number,\r\n    unit: RelativeTimeUnit,\r\n    format?: RelativeTimeFormat\r\n  ): string\r\n\r\n  getFirstDayOfWeek(locale: string): number // 0 to 6, 0 means Sunday\r\n  getCalendarWeek(locale: string, date: Date): number // 1 to 53\r\n  getWeekendDays(locale: string): Readonly<number[]> // array of integers between 0 and 6\r\n}>\r\n\r\ntype Localizer = Readonly<{\r\n  getLocale(): string\r\n\r\n  translate<\r\n    C extends keyof TranslationsMap,\r\n    K extends keyof TranslationsMap[C]\r\n  >(\r\n    category: C & Category,\r\n    key: K & string,\r\n    params?: FirstArg<TranslationsMap[C][K]>\r\n  ): string\r\n\r\n  parseNumber(numberString: string): number | null\r\n  parseDate(dateString: string): Date | null\r\n  formatNumber(value: number, format?: NumberFormat): string\r\n  formatDate(value: Date, format?: DateFormat | null): string\r\n\r\n  formatRelativeTime(\r\n    value: number,\r\n    unit: RelativeTimeUnit,\r\n    format?: RelativeTimeFormat\r\n  ): string\r\n\r\n  getFirstDayOfWeek(): number // 0 to 6, 0 means Sunday\r\n  getWeekendDays(): Readonly<number[]> // array of integer form 0 to 6\r\n  getCalendarWeek(date: Date): number // 1 to 53\r\n  getDayName(index: number, format?: 'long' | 'short' | 'narrow'): string\r\n  getDayNames(format?: 'long' | 'short' | 'narrow'): string[]\r\n  getMonthName(index: number, format?: 'long' | 'short' | 'narrow'): string\r\n  getMonthNames(format?: 'long' | 'short' | 'narrow'): string[]\r\n}>\r\n\r\ninterface NumberFormat extends Intl.NumberFormatOptions {}\r\ninterface DateFormat extends Intl.DateTimeFormatOptions {}\r\ntype RelativeTimeFormat = Intl.RelativeTimeFormatOptions\r\ntype RelativeTimeUnit = Intl.RelativeTimeFormatUnit\r\n\r\n// === local types ===================================================\r\n\r\ntype Lang = string\r\ntype TranslationsMap = Localize.TranslationsMap\r\ntype FirstArg<T> = T extends (arg: infer A) => any ? A : never\r\n\r\ntype StartsWith<A extends string, B extends string> = A extends `${B}${string}`\r\n  ? A\r\n  : never\r\n\r\n// === addToDict =====================================================\r\n\r\nfunction addToDict<\r\n  C extends keyof TranslationsMap,\r\n  T extends Record<Lang, Partial<Record<C, TranslationsMap[C]>>>\r\n>(translations: T) {\r\n  for (const [language, data] of Object.entries(translations)) {\r\n    for (const [category, terms] of Object.entries(data as any)) {\r\n      for (const [key, value] of Object.entries(terms as any)) {\r\n        dict.addTranslation(language, category, key, value as any)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// === init ==========================================================\r\n\r\nfunction init(params: {\r\n  defaultLocale?: string\r\n\r\n  customize?(\r\n    self: Localization,\r\n    base: Localization,\r\n    defaultLocale: string\r\n  ): Partial<Localization>\r\n}): void {\r\n  if (isFinal) {\r\n    throw (\r\n      'Illegal invocation of `init(...)`' +\r\n      '- must only be used at start of the app' +\r\n      ' before any other localization function has been used'\r\n    )\r\n  }\r\n\r\n  isFinal = true\r\n\r\n  if (params.defaultLocale) {\r\n    defaultLocale = params.defaultLocale\r\n  }\r\n\r\n  if (params.customize) {\r\n    const self = { ...baseBehavior }\r\n\r\n    behavior = Object.assign(\r\n      self,\r\n      params.customize(self, baseBehavior, defaultLocale)\r\n    )\r\n  }\r\n}\r\n\r\n// === localize ======================================================\r\n\r\nfunction localize(\r\n  localeOrGetLocale: string | null | (() => string | null)\r\n): Localizer {\r\n  const getLocale =\r\n    typeof localeOrGetLocale === 'function'\r\n      ? () => localeOrGetLocale() || defaultLocale\r\n      : () => localeOrGetLocale || defaultLocale\r\n\r\n  isFinal = true\r\n  return createLocalizer(getLocale, behavior)\r\n}\r\n\r\n// === check ==========================================================\r\n\r\nfunction check<\r\n  C extends keyof TranslationsMap,\r\n  T extends Record<Lang, Record<C, TranslationsMap[C]>>\r\n>(translations: T): T\r\n\r\nfunction check<\r\n  B extends string,\r\n  C extends keyof TranslationsMap,\r\n  T extends Record<Lang, Record<StartsWith<C, B>, TranslationsMap[C]>>\r\n>(pattern: `${B}*`, translations: T): T\r\n\r\nfunction check(arg1: any, arg2?: any) {\r\n  return typeof arg1 === 'string' ? arg2 : arg1\r\n}\r\n\r\nconst tr = {\r\n  en: {\r\n    'jsCockpit.dialogs': {\r\n      ok: 'Okay',\r\n      cancel: 'Cancel'\r\n    },\r\n\r\n    //   'jsCockpit.dataExplorer': {\r\n    //     loadingMessage: 'xxx'\r\n    //   },\r\n\r\n    'jsCockpit.loginForm': {\r\n      loadingMessage: 'x' // TODOOOOOOOOOOOOOOOOOO\r\n    }\r\n  }\r\n}\r\n\r\naddToDict(tr)\r\n\r\n// === local data ====================================================\r\n\r\n// singleton dictionary to store the translations\r\nconst dict = new Dictionary()\r\n\r\n// flag that indicates whether an initial customizing\r\n// of the localization behavior is still possible or not\r\nlet isFinal = false\r\n\r\n// default locale is \"en-US\", but this can be customized\r\n// by using the `init` function\r\nlet defaultLocale = 'en-US'\r\n\r\n// === local functions ===============================================\r\n\r\nconst baseBehavior: Localization = {\r\n  translate: dict.translate.bind(dict) as any, // TODO\r\n  formatNumber,\r\n  formatDate,\r\n  parseNumber,\r\n  parseDate,\r\n  formatRelativeTime,\r\n  getFirstDayOfWeek,\r\n  getCalendarWeek,\r\n  getWeekendDays\r\n}\r\n\r\nlet behavior: Localization = {\r\n  ...baseBehavior,\r\n\r\n  translate(locale, category, key, replacements?) {\r\n    let translation = baseBehavior.translate(\r\n      locale,\r\n      category,\r\n      key,\r\n      replacements\r\n    )\r\n\r\n    if (translation === null && defaultLocale !== locale) {\r\n      translation = baseBehavior.translate(\r\n        defaultLocale,\r\n        category,\r\n        key,\r\n        replacements\r\n      )\r\n    }\r\n\r\n    return translation\r\n  }\r\n}\r\n\r\nfunction createLocalizer(\r\n  getLocale: () => string,\r\n  i18n: Localization\r\n): Localizer {\r\n  const localizer: Localizer = {\r\n    getLocale,\r\n\r\n    translate: (category, key, replacements?) =>\r\n      i18n.translate(getLocale(), category, key, replacements) || '',\r\n\r\n    parseNumber: (numberString) => i18n.parseNumber(getLocale(), numberString),\r\n    parseDate: (dateString) => i18n.parseDate(getLocale(), dateString),\r\n\r\n    formatNumber: (number, format) =>\r\n      i18n.formatNumber(getLocale(), number, format),\r\n\r\n    formatDate: (date, format) => i18n.formatDate(getLocale(), date, format),\r\n\r\n    formatRelativeTime: (number, unit, format) =>\r\n      i18n.formatRelativeTime(getLocale(), number, unit, format),\r\n\r\n    getFirstDayOfWeek: () => i18n.getFirstDayOfWeek(getLocale()),\r\n    getWeekendDays: () => i18n.getWeekendDays(getLocale()),\r\n    getCalendarWeek: (date: Date) => i18n.getCalendarWeek(getLocale(), date),\r\n\r\n    getDayName(index, format = 'long') {\r\n      const date = new Date(1970, 0, 4 + (index % 7))\r\n\r\n      return new Intl.DateTimeFormat(getLocale(), { weekday: format }).format(\r\n        date\r\n      )\r\n    },\r\n\r\n    getDayNames(format = 'long') {\r\n      const arr: string[] = []\r\n\r\n      for (let i = 0; i < 7; ++i) {\r\n        arr.push(localizer.getDayName(i, format))\r\n      }\r\n\r\n      return arr\r\n    },\r\n\r\n    getMonthName(index, format = 'long') {\r\n      const date = new Date(1970, index % 12, 1)\r\n\r\n      return new Intl.DateTimeFormat(getLocale(), { month: format }).format(\r\n        date\r\n      )\r\n    },\r\n\r\n    getMonthNames(format = 'long') {\r\n      const arr: string[] = []\r\n\r\n      for (let i = 0; i < 12; ++i) {\r\n        arr.push(localizer.getMonthName(i, format))\r\n      }\r\n\r\n      return arr\r\n    }\r\n  }\r\n\r\n  return localizer\r\n}\r\n", "// === exports =======================================================\r\n\r\nexport {\r\n  formatDate,\r\n  formatNumber,\r\n  formatRelativeTime,\r\n  getCalendarWeek,\r\n  getFirstDayOfWeek,\r\n  getLocaleInfo,\r\n  getWeekendDays,\r\n  parseDate,\r\n  parseNumber,\r\n};\r\n\r\n// === constants =====================================================\r\n\r\nconst defaultFirstDayOfWeek = 1;\r\nconst defaultWeekendDays = Object.freeze([0, 6]); // Sunday and Saturday\r\n\r\nconst DefaultDateFormat: Intl.DateTimeFormatOptions = Object.freeze({\r\n  day: \"2-digit\",\r\n  month: \"2-digit\",\r\n  year: \"numeric\",\r\n});\r\n\r\n// === getLocaleInfo =================================================\r\n\r\ntype LocaleInfo = Readonly<{\r\n  baseName: string;\r\n  language: string;\r\n  region: string | undefined;\r\n}>;\r\n\r\nconst localeInfoMap = new Map<string, LocaleInfo>();\r\n\r\nfunction getLocaleInfo(locale: string): LocaleInfo {\r\n  let info = localeInfoMap.get(locale);\r\n\r\n  if (!info) {\r\n    info = new (Intl as any).Locale(locale); // TODO\r\n    localeInfoMap.set(locale, info!);\r\n  }\r\n\r\n  return info!;\r\n}\r\n\r\n// --- getFirstDayOfWeek ---------------------------------------------\r\n\r\n// Source: https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\r\n// Day of week is represented by number (0 = sunday, ..., 6 = saturday).\r\nconst firstDayOfWeekData: Record<number, string> = {\r\n  0:\r\n    \"AG,AS,AU,BD,BR,BS,BT,BW,BZ,CA,CN,CO,DM,DO,ET,GT,GU,HK,HN,ID,IL,IN,\" +\r\n    \"JM,JP,KE,KH,KR,LA,MH,MM,MO,MT,MX,MZ,NI,NP,PA,PE,PH,PK,PR,PT,PY,SA,\" +\r\n    \"SG,SV,TH,TT,TW,UM,US,VE,VI,WS,YE,ZA,ZW\",\r\n  1:\r\n    \"AD,AI,AL,AM,AN,AR,AT,AX,AZ,BA,BE,BG,BM,BN,BY,CH,CL,CM,CR,CY,CZ,DE,\" +\r\n    \"DK,EC,EE,ES,FI,FJ,FO,FR,GB,GE,GF,GP,GR,HR,HU,IE,IS,IT,KG,KZ,LB,LI,\" +\r\n    \"LK,LT,LU,LV,MC,MD,ME,MK,MN,MQ,MY,NL,NO,NZ,PL,RE,RO,RS,RU,SE,SI,SK,\" +\r\n    \"SM,TJ,TM,TR,UA,UY,UZ,VA,VN,XK\",\r\n  5: \"MV\",\r\n  6: \"AE,AF,BH,DJ,DZ,EG,IQ,IR,JO,KW,LY,OM,QA,SD,SY\",\r\n};\r\n\r\nlet firstDayOfWeekByCountryCode: Map<string, number>;\r\n\r\nfunction getFirstDayOfWeek(locale: string): number {\r\n  if (!firstDayOfWeekByCountryCode) {\r\n    firstDayOfWeekByCountryCode = new Map();\r\n\r\n    for (const firstDayOfWeek of Object.keys(firstDayOfWeekData)) {\r\n      const firstDay = firstDayOfWeek as any as number;\r\n      const countryCodes = firstDayOfWeekData[firstDay].split(\",\");\r\n\r\n      countryCodes.forEach((countryCode) => {\r\n        firstDayOfWeekByCountryCode.set(countryCode, firstDay);\r\n      });\r\n    }\r\n  }\r\n\r\n  const region = getLocaleInfo(locale).region;\r\n\r\n  return region\r\n    ? firstDayOfWeekByCountryCode.get(region) || defaultFirstDayOfWeek\r\n    : defaultFirstDayOfWeek;\r\n}\r\n\r\n// --- getWeekendDays ------------------------------------------------\r\n\r\n// Source: https://github.com/unicode-cldr/cldr-core/blob/master/supplemental/weekData.json\r\nconst weekendData: Record<string, string> = {\r\n  // Friday and Saturday\r\n  \"5+6\": \"AE,BH,DZ,EG,IL,IQ,JO,KW,LY,OM,QA,SA,SD,SY,YE\",\r\n\r\n  // Thursday and Friday\r\n  \"4+5\": \"AF\",\r\n\r\n  // Sunday\r\n  \"6\": \"IN,UG\",\r\n\r\n  // Friday\r\n  \"5\": \"IR\",\r\n};\r\n\r\nlet weekendDaysByCountryCode: Map<string, Readonly<number[]>>;\r\n\r\nfunction getWeekendDays(locale: string): Readonly<number[]> {\r\n  if (!weekendDaysByCountryCode) {\r\n    weekendDaysByCountryCode = new Map();\r\n\r\n    for (const [key, value] of Object.entries(weekendData)) {\r\n      const days = Object.freeze(key.split(\"+\").map((it) => parseInt(it)));\r\n      const countryCodes = value.split(\",\");\r\n\r\n      countryCodes.forEach((countryCode) => {\r\n        weekendDaysByCountryCode.set(countryCode, days);\r\n      });\r\n    }\r\n  }\r\n\r\n  const region = getLocaleInfo(locale).region;\r\n\r\n  return region\r\n    ? weekendDaysByCountryCode.get(region) || defaultWeekendDays\r\n    : defaultWeekendDays;\r\n}\r\n\r\n// --- parseNumber ---------------------------------------------------\r\n\r\nconst numberParserByLocale = new Map<string, (s: string) => number | null>();\r\n\r\nfunction parseNumber(locale: string, numberString: string): number | null {\r\n  let numberParser = numberParserByLocale.get(locale);\r\n\r\n  if (!numberParser) {\r\n    const example = Intl.NumberFormat(locale).format(3.4);\r\n\r\n    if (\r\n      example.indexOf(\"3\") !== 0 ||\r\n      example.indexOf(\"4\") !== 2 ||\r\n      example.length !== 3\r\n    ) {\r\n      throw new Error(\"Unsupported locale for automatic number parser\");\r\n    }\r\n\r\n    const separators = new Set(\r\n      Intl.NumberFormat(locale).format(123456789).replace(/\\d/g, \"\").split(\"\")\r\n    );\r\n\r\n    if (separators.size > 1) {\r\n      throw new Error(\"Unsupported locale for automatic number parser\");\r\n    }\r\n\r\n    const decimalSeparator = example[1];\r\n    const digitGroupSeparator = [...separators.values()][0] || \"\";\r\n\r\n    const regExp = new RegExp(\r\n      `^\\\\d(\\\\d|${escapeRegExp(digitGroupSeparator)})*(${escapeRegExp(\r\n        decimalSeparator\r\n      )}\\\\d+)?$`\r\n    );\r\n\r\n    numberParser = (s: string) => {\r\n      if (!s.match(regExp)) {\r\n        return null;\r\n      }\r\n\r\n      let numberString = s;\r\n\r\n      if (digitGroupSeparator) {\r\n        numberString = numberString.replaceAll(digitGroupSeparator, \"\");\r\n      }\r\n\r\n      numberString = numberString.replace(decimalSeparator, \".\");\r\n\r\n      let number = parseFloat(numberString);\r\n\r\n      if (numberString !== number.toString()) {\r\n        return null;\r\n      }\r\n\r\n      return number;\r\n    };\r\n\r\n    numberParserByLocale.set(locale, numberParser);\r\n  }\r\n\r\n  return numberParser(numberString);\r\n}\r\n\r\n// --- parseDate -----------------------------------------------------\r\n\r\nfunction parseDate(locale: string, dateString: string): Date | null {\r\n  return getDateParser(locale)(dateString);\r\n}\r\n\r\n// --- getDateParser -------------------------------------------------\r\n\r\nconst dateParserByLocale = new Map<string, (date: string) => Date | null>();\r\n\r\nfunction getDateParser(locale: string): (s: string) => Date | null {\r\n  let dateParser = dateParserByLocale.get(locale);\r\n\r\n  if (!dateParser) {\r\n    const example = Intl.DateTimeFormat(locale).format(new Date(\"2100-11-23\"));\r\n\r\n    if (\r\n      example.indexOf(\"2100\") === -1 ||\r\n      example.indexOf(\"11\") === -1 ||\r\n      example.indexOf(\"23\") === -1\r\n    ) {\r\n      // too complex date format - use ISO format as fallback\r\n      dateParserByLocale.set(locale, parseIsoDateString);\r\n      return parseIsoDateString;\r\n    }\r\n\r\n    const regExp = new RegExp(\r\n      \"^\" +\r\n        escapeRegExp(example)\r\n          .replace(\"2100\", \"\\\\s*(?<year>\\\\d{1,4})\\\\s*\")\r\n          .replace(\"11\", \"\\\\s*(?<month>\\\\d{1,2})\\\\s*\")\r\n          .replace(\"23\", \"\\\\s*(?<day>\\\\d{1,2})\\\\s*\") +\r\n        \"$\"\r\n    );\r\n\r\n    dateParser = (s: string) => {\r\n      const match = regExp.exec(s);\r\n\r\n      if (!match) {\r\n        return null;\r\n      }\r\n\r\n      const { year, month, day } = match.groups!;\r\n\r\n      return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));\r\n    };\r\n\r\n    dateParserByLocale.set(locale, dateParser);\r\n  }\r\n\r\n  return dateParser;\r\n}\r\n\r\n// --- formatNumber --------------------------------------------------\r\n\r\nfunction formatNumber(\r\n  locale: string,\r\n  value: number,\r\n  format: Intl.NumberFormatOptions\r\n): string {\r\n  return new Intl.NumberFormat(locale, format).format(value);\r\n}\r\n\r\n// --- formatDate ----------------------------------------------------\r\n\r\nfunction formatDate(\r\n  locale: string,\r\n  value: Date,\r\n  format?: Intl.DateTimeFormatOptions | null\r\n): string {\r\n  if (!format) {\r\n    if (getDateParser(locale) === parseIsoDateString) {\r\n      return value.toISOString().substr(0, 10);\r\n    }\r\n\r\n    format = DefaultDateFormat;\r\n  }\r\n\r\n  return new Intl.DateTimeFormat(locale, format).format(value);\r\n}\r\n\r\n// --- parseIsoDateString --------------------------------------------\r\n\r\nfunction parseIsoDateString(s: string): Date | null {\r\n  // TODO!!!!!\r\n  return new Date(s);\r\n}\r\n\r\n// === getCalendarWeek ===============================================\r\n\r\nfunction getCalendarWeek(locale: string, date: Date) {\r\n  // Code is based on this solution here:\r\n  // https://stackoverflow.com/questions/23781366/date-get-week-number-for-custom-week-start-day\r\n  // TODO - check algorithm\r\n\r\n  const weekstart = getFirstDayOfWeek(locale);\r\n  const target = new Date(date);\r\n\r\n  // Replaced offset of (6) with (7 - weekstart)\r\n  const dayNum = (date.getDay() + 7 - weekstart) % 7;\r\n  target.setDate(target.getDate() - dayNum + 3);\r\n  const firstThursday = target.valueOf();\r\n  target.setMonth(0, 1);\r\n\r\n  if (target.getDay() !== 4) {\r\n    target.setMonth(0, 1 + ((4 - target.getDay() + 7) % 7));\r\n  }\r\n\r\n  return 1 + Math.ceil((firstThursday - target.valueOf()) / 604800000);\r\n}\r\n\r\nfunction formatRelativeTime(\r\n  locale: string,\r\n  value: number,\r\n  unit: Intl.RelativeTimeFormatUnit,\r\n  format: Intl.RelativeTimeFormatOptions\r\n): string {\r\n  return new Intl.RelativeTimeFormat(locale, format).format(value, unit);\r\n}\r\n\r\n// === utils =========================================================\r\n\r\nfunction escapeRegExp(s: string) {\r\n  return s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n}\r\n", "import { getLocaleInfo } from \"./utils\";\r\n\r\n// === exports =======================================================\r\n\r\nexport { Dictionary };\r\n\r\n// === constants =====================================================\r\n\r\nconst SEP = \"|@:_:_:_:@|\"; // TODO\r\n\r\n// === Dictionary ====================================================\r\n\r\nclass Dictionary {\r\n  // --- private -----------------------------------------------------\r\n\r\n  #translations = new Map<string, string | Function>();\r\n\r\n  // --- public ------------------------------------------------------\r\n\r\n  addTranslation(\r\n    locale: string,\r\n    category: string,\r\n    key: string,\r\n    translation: string | ((params: Record<string, any>) => string)\r\n  ): void {\r\n    this.#translations.set(\r\n      `${locale}${SEP}${category}${SEP}${key}`,\r\n      translation\r\n    );\r\n  }\r\n\r\n  translate(\r\n    locale: string,\r\n    category: string,\r\n    key: string,\r\n    params?: Record<string, any>\r\n  ): string | null {\r\n    const { baseName, language } = getLocaleInfo(locale);\r\n\r\n    let ret =\r\n      this.#translations.get(`${locale}${SEP}${category}${SEP}${key}`) || null;\r\n\r\n    if (ret === null && locale) {\r\n      if (baseName !== locale) {\r\n        ret =\r\n          this.#translations.get(`${baseName}${SEP}${category}${SEP}${key}`) ||\r\n          null;\r\n      }\r\n\r\n      if (ret === null) {\r\n        if (language !== baseName) {\r\n          ret =\r\n            this.#translations.get(\r\n              `${language}${SEP}${category}${SEP}${key}`\r\n            ) || null;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (ret !== null && params) {\r\n      if (typeof ret !== \"function\") {\r\n        console.log(ret); // TODO\r\n\r\n        throw new Error(\r\n          `Invalid translation parameters for category ${category} key \"${key}\" in locale \"${locale}\"`\r\n        );\r\n      }\r\n\r\n      ret = String(ret(params));\r\n    }\r\n\r\n    console.log(\"--->\", locale, category, key, \":::\", ret);\r\n    return ret === null ? ret : String(ret);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
